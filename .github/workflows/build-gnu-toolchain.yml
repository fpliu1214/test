name: build gnu toolchain

on:
  workflow_dispatch:

jobs:
  testing:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        #version: ['18.04', '20.04', '22.04', '24.04']
        version: ['18.04']
        target-arch: [x86_64]
          #target-arch: [x86_64, aarch64, ppc64le, riscv64, s390x]
 
    steps:
      - run: |
          cat > run.sh <<EOF
          set -ex

          export GITHUB_ACTIONS=true

          apt -y update
          apt -y install curl xz-utils g++

          curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          chmod a+x ppkg

          ./ppkg setup
          ./ppkg update
          ./ppkg install gcc binutils glibc --profile=debug
          ./ppkg pack    gcc
          ./ppkg pack    binutils
          ./ppkg pack    glibc
          EOF

      # https://github.com/multiarch/qemu-user-static
      - if: matrix.target-arch != 'x86_64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - if: matrix.target-arch == 'x86_64'
        run: docker run -v $PWD:/root -w /root --name ubuntu         ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'aarch64'
        run: docker run -v $PWD:/root -w /root --name ubuntu arm64v8/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'ppc64le'
        run: docker run -v $PWD:/root -w /root --name ubuntu ppc64le/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'riscv64'
        run: docker run -v $PWD:/root -w /root --name ubuntu riscv64/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 's390x'
        run: docker run -v $PWD:/root -w /root --name ubuntu   s390x/ubuntu:${{ matrix.version }} sh run.sh

      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-${{ matrix.version }}-x86_64.tar.xz
          path: '*.tar.xz'
