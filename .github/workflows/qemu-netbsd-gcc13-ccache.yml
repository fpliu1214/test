name: build ccache with gcc13 on QEMU/NetBSD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  testing:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        netbsd-version: ['10.0', '9.4', '9.3', '9.2']

    steps:
      - run: curl -LO https://curl.se/ca/cacert.pem

      - uses: cross-platform-actions/action@v0.25.0
        with:
          operating_system: netbsd
          version: ${{ matrix.netbsd-version }}
          shell: bash
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "$*"
              eval "$@"
            }

            run sudo pkgin -y install curl gcc13 cmake gmake

            run export SSL_CERT_FILE="$PWD/cacert.pem"

            cat > test.c <<EOF
            #include <ctype.h>
            int main() {
              const char * str = "0x1";
              return isxdigit(str[0]);
            }
            EOF

            run /usr/pkg/gcc13/bin/gcc -Wall test.c

            exit 0

            export  CC='/usr/pkg/gcc13/bin/gcc'
            export CXX='/usr/pkg/gcc13/bin/g++'

            run curl -LO https://github.com/ccache/ccache/releases/download/v4.10.2/ccache-4.10.2.tar.xz

            run tar vxf ccache-4.10.2.tar.xz --strip-components=1

            run cmake \
                -S . \
                -B build.d \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DCMAKE_COLOR_MAKEFILE=ON \
                -DCMAKE_INSTALL_PREFIX=$PWD/out \
                -DCMAKE_EXE_LINKER_FLAGS="'-Wl,--as-needed -Wl,-z,muldefs -Wl,--allow-multiple-definition -flto -Wl,-s'" \
                -DCMAKE_CXX_FLAGS='-Os' \
                -DCMAKE_C_FLAGS='-Os' \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_COVERAGE=OFF \
                -DENABLE_CPPCHECK=OFF \
                -DENABLE_IPO=ON \
                -DENABLE_TRACING=OFF \
                -DWARNINGS_AS_ERRORS=OFF \
                -DZSTD_FROM_INTERNET=OFF

            run cmake --build build.d

            run cmake --install build.d
