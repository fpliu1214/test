name: toolchains.bootlin.com

on:
  workflow_dispatch:

jobs:
  testing:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        version: ['16.04', '18.04', '20.04', '21.04', '22.04', '23.04', '24.04', latest]
        target-arch: [x86_64]
          #target-arch: [x86_64, aarch64, ppc64le, riscv64, s390x]
 
    steps:
      - run: curl -LO https://curl.se/ca/cacert.pem

      - run: curl -L -o curl     https://github.com/leleliu008/test/releases/download/2023.10.08/curl-8.7.1-linux-x86_64
      - run: curl -L -o bsdtar   https://github.com/leleliu008/test/releases/download/2023.10.08/bsdtar-3.7.2-linux-x86_64
      - run: curl -L -o xxd      https://github.com/leleliu008/test/releases/download/2023.10.08/xxd-9.1.0200-linux-x86_64
      - run: curl -L -o gsed     https://github.com/leleliu008/test/releases/download/2023.10.08/gsed-4.9-linux-x86_64
      - run: curl -L -o patchelf https://github.com/leleliu008/test/releases/download/2023.10.08/patchelf-0.18.0-linux-x86_64

      - run: chmod +x curl bsdtar xxd gsed patchelf

      - run: |
          cat > run.sh <<EOF
          set -ex

          ldd --version
          ldd --version | sed -n '/2\.[0-9][0-9]/p' | sed 's/.*\(2\.[0-9][0-9]\).*/\1/'

          install -d toolchain

          GLIBC_VERSION="\$(ldd --version | sed -n '/2\.[0-9][0-9]/p' | sed 's/.*\(2\.[0-9][0-9]\).*/\1/')"

          unset V

          if [ -n "\$GLIBC_VERSION" ] ; then
            case  "\$GLIBC_VERSION" in
              2.39) V='2024.05-1' ; X=tar.xz  ;;
              2.38) V='2023.11-1' ; X=tar.bz2 ;;
              2.37) V='2023.08-1' ; X=tar.bz2 ;;
              2.36) V='2022.08-1' ; X=tar.bz2 ;;
              2.35) V='2022.08-1' ; X=tar.bz2 ;;
              2.34) V='2021.11-5' ; X=tar.bz2 ;;
              2.*)
                  GLIBC_VERSION_MINOR="\$(printf '%s\n' "\$GLIBC_VERSION" | cut -d. -f2)"

                  if [ "\$GLIBC_VERSION_MINOR" -ge 40 ] ; then
                    V='2024.05-1'
                    X=tar.xz
                  elif [ "\$GLIBC_VERSION_MINOR" -le 33 ] ; then
                    V='2021.11-5'
                    X=tar.bz2
                  fi
            esac
          fi

          V='2024.05-1'
          X=tar.xz

          export SSL_CERT_FILE="$PWD/cacert.pem"

          ./curl -LO https://toolchains.bootlin.com/downloads/releases/toolchains/x86-64/tarballs/x86-64--glibc--stable-\$V.\$X
          ./bsdtar xf x86-64--glibc--stable-\$V.\$X -C toolchain --strip-components=1

          ./patchelf --set-interpreter "$PWD/toolchain/x86_64-buildroot-linux-gnu/sysroot/lib/ld-linux-x86-64.so.2" toolchain/bin/x86_64-linux-gcc
          ./patchelf --set-rpath       "$PWD/toolchain/x86_64-buildroot-linux-gnu/sysroot/lib"                      toolchain/bin/x86_64-linux-gcc
          ./patchelf --set-interpreter "$PWD/toolchain/x86_64-buildroot-linux-gnu/sysroot/lib/ld-linux-x86-64.so.2" toolchain/x86_64-buildroot-linux-gnu/bin/ld
          ./patchelf --set-rpath       "$PWD/toolchain/x86_64-buildroot-linux-gnu/sysroot/lib"                      toolchain/x86_64-buildroot-linux-gnu/bin/ld
          ./patchelf --set-rpath       "$PWD/toolchain/x86_64-buildroot-linux-gnu/sysroot/lib"                      toolchain/libexec/gcc/x86_64-buildroot-linux-gnu/13.3.0/liblto_plugin.so

          echo '
          #include<stdio.h>
          int main() {
            puts("Hello");
            return 0;
          }
          ' > test.c

          cat test.c

          toolchain/bin/x86_64-linux-gcc test.c
          ./a.out
          EOF

      # https://github.com/multiarch/qemu-user-static
      - if: matrix.target-arch != 'x86_64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - if: matrix.target-arch == 'x86_64'
        run: docker run -v $PWD:/root -w /root --name ubuntu         ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'aarch64'
        run: docker run -v $PWD:/root -w /root --name ubuntu arm64v8/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'ppc64le'
        run: docker run -v $PWD:/root -w /root --name ubuntu ppc64le/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'riscv64'
        run: docker run -v $PWD:/root -w /root --name ubuntu riscv64/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 's390x'
        run: docker run -v $PWD:/root -w /root --name ubuntu   s390x/ubuntu:${{ matrix.version }} sh run.sh
