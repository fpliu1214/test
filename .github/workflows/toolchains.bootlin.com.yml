name: toolchains.bootlin.com

on:
  workflow_dispatch:

jobs:
  testing:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        version: ['16.04', '18.04', '20.04', '21.04', '22.04', '23.04', '24.04', latest]
        target-arch: [x86_64]
          #target-arch: [x86_64, aarch64, ppc64le, riscv64, s390x]
 
    steps:
      - run: |
          cat > run.sh <<EOF
          set -ex

          apt update -y
          apt install -y curl

          curl -LO https://toolchains.bootlin.com/downloads/releases/toolchains/x86-64/tarballs/x86-64--glibc--stable-2024.05-1.tar.xz
          tar xf x86-64--glibc--stable-2024.05-1.tar.xz

          echo '
          #include<stdio.h>
          int main() {
            puts("Hello");
            return 0;
          }
          ' > test.c

          cat test.c

          x86-64--glibc--stable-2024.05-1/bin/x86_64-linux-gcc test.c
          ./a.out
          EOF

      # https://github.com/multiarch/qemu-user-static
      - if: matrix.target-arch != 'x86_64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - if: matrix.target-arch == 'x86_64'
        run: docker run -v $PWD:/root -w /root --name ubuntu         ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'aarch64'
        run: docker run -v $PWD:/root -w /root --name ubuntu arm64v8/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'ppc64le'
        run: docker run -v $PWD:/root -w /root --name ubuntu ppc64le/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 'riscv64'
        run: docker run -v $PWD:/root -w /root --name ubuntu riscv64/ubuntu:${{ matrix.version }} sh run.sh

      - if: matrix.target-arch == 's390x'
        run: docker run -v $PWD:/root -w /root --name ubuntu   s390x/ubuntu:${{ matrix.version }} sh run.sh
