name: publish uctags-builder

on:
  workflow_dispatch:

jobs:

  check:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - id:  check-if-has-new-commit
        run: printf 'HAS_NEW_COMMIT=yes\n' >> "$GITHUB_OUTPUT"

    outputs:
      if-has-new-commit: ${{ steps.check-if-has-new-commit.outputs.HAS_NEW_COMMIT }}

  freebsd:
    needs: [check]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['14.1', '14.0', '13.3', '13.2']

    steps:
      - uses: actions/checkout@v4

      - uses: cross-platform-actions/action@v0.25.0
        with:
          operating_system: freebsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "$*"
              eval "$@"
            }

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup --syspm
            run ./ppkg update
            run ./ppkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils --static

            [ -z "$GID" ] && GID="$(id -g -n)"
            [ -z "$UID" ] && UID="$(id -u -n)"

            run sudo install -d -g "$GID" -o "$UID" /opt/uctags-builder/

            (
              for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
              do
                PACKAGE_INSTALLED_DIR="$(./ppkg info-installed $item --prefix)"
                run cd "$PACKAGE_INSTALLED_DIR"
                run cp -rf * /opt/uctags-builder/
                run cd -
              done
            )

            export PATH="$HOME/.ppkg/core/bin:$PATH"

            export SSL_CERT_FILE="$HOME/.ppkg/core/cacert.pem"

            run curl -LO https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
            run chmod a+x xbuilder

            run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

            run tar cvJPf uctags-builder-freebsd-${{ matrix.target-version }}-amd64.tar.xz /opt/uctags-builder

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-freebsd-${{ matrix.target-version }}-amd64.tar.xz
          path: uctags-builder-freebsd-${{ matrix.target-version }}-amd64.tar.xz


  openbsd:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['7.5', '7.4', '7.3', '7.2']

    steps:
      - uses: actions/checkout@v4

      - uses: cross-platform-actions/action@v0.25.0
        with:
          operating_system: openbsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "$*"
              eval "$@"
            }

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup --syspm
            run ./ppkg update
            run ./ppkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils --static

            [ -z "$GID" ] && GID="$(id -g -n)"
            [ -z "$UID" ] && UID="$(id -u -n)"

            run sudo install -d -g "$GID" -o "$UID" /opt/uctags-builder/

            (
              for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
              do
                PACKAGE_INSTALLED_DIR="$(./ppkg info-installed $item --prefix)"
                run cd "$PACKAGE_INSTALLED_DIR"
                run cp -rf * /opt/uctags-builder/
                run cd -
              done
            )

            export PATH="$HOME/.ppkg/core/bin:$PATH"

            export SSL_CERT_FILE="$HOME/.ppkg/core/cacert.pem"

            run curl -LO https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
            run chmod a+x xbuilder
            run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

            run bsdtar cvaPf uctags-builder-openbsd-${{ matrix.target-version }}-amd64.tar.xz /opt/uctags-builder

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-openbsd-${{ matrix.target-version }}-amd64.tar.xz
          path: uctags-builder-openbsd-${{ matrix.target-version }}-amd64.tar.xz

  netbsd:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.0', '9.4', '9.3', '9.2']

    steps:
      - uses: actions/checkout@v4

      - run: curl -LO https://curl.se/ca/cacert.pem

      - uses: cross-platform-actions/action@v0.25.0
        with:
          operating_system: netbsd
          version: ${{ matrix.target-version }}
          shell: bash
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "$*"
              eval "$@"
            }

            run export SSL_CERT_FILE="$PWD/cacert.pem"

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup --syspm
            run ./ppkg update
            run ./ppkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils --static

            [ -z "$GID" ] && GID="$(id -g -n)"
            [ -z "$UID" ] && UID="$(id -u -n)"

            run sudo install -d -g "$GID" -o "$UID" /opt/uctags-builder/

            (
              for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
              do
                PACKAGE_INSTALLED_DIR="$(./ppkg info-installed $item --prefix)"
                run cd "$PACKAGE_INSTALLED_DIR"
                run cp -rf * /opt/uctags-builder/
                run cd -
              done
            )

            export PATH="$HOME/.ppkg/core/bin:$PATH"

            export SSL_CERT_FILE="$HOME/.ppkg/core/cacert.pem"

            run curl -LO https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
            run chmod a+x xbuilder
            run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

            run tar cvJPf uctags-builder-netbsd-${{ matrix.target-version }}-amd64.tar.xz /opt/uctags-builder

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-netbsd-${{ matrix.target-version }}-amd64.tar.xz
          path: uctags-builder-netbsd-${{ matrix.target-version }}-amd64.tar.xz


  macos-arm64:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-14

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.15', '11.0', '12.0', '13.0', '14.0']

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg
      - run: ./xcpkg setup
      - run: ./xcpkg update
      - run: ./xcpkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils --target=MacOSX-${{ matrix.target-version }}-arm64
      - run: |
          [ -z "$GID" ] && GID="$(id -g -n)"
          [ -z "$UID" ] && UID="$(id -u -n)"

          sudo install -d -g "$GID" -o "$UID" /opt/uctags-builder/

          for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
          do
            PACKAGE_INSTALLED_DIR="$(./xcpkg info-installed MacOSX-${{ matrix.target-version }}-arm64/$item --prefix)"
            cd "$PACKAGE_INSTALLED_DIR"
            cp -rf * /opt/uctags-builder/
            cd -
          done

      - run: curl -LO https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
      - run: chmod a+x xbuilder
      - run: ./xcpkg run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

      - run: tar cvJPf uctags-builder-macos-${{ matrix.target-version }}-arm64.tar.xz /opt/uctags-builder

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-macos-${{ matrix.target-version }}-arm64.tar.xz
          path: uctags-builder-macos-${{ matrix.target-version }}-arm64.tar.xz


  macos-x86_64:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-13

    strategy:
      fail-fast: false
      matrix:
        target-version: ['10.15', '11.0', '12.0', '13.0', '14.0']

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg
      - run: ./xcpkg setup
      - run: ./xcpkg update
      - run: ./xcpkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils --target=MacOSX-${{ matrix.target-version }}-x86_64
      - run: |
          [ -z "$GID" ] && GID="$(id -g -n)"
          [ -z "$UID" ] && UID="$(id -u -n)"

          sudo install -d -g "$GID" -o "$UID" /opt/uctags-builder/

          for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
          do
            PACKAGE_INSTALLED_DIR="$(./xcpkg info-installed MacOSX-${{ matrix.target-version }}-x86_64/$item --prefix)"
            cd "$PACKAGE_INSTALLED_DIR"
            cp -rf * /opt/uctags-builder/
            cd -
          done

      - run: curl -LO https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
      - run: chmod a+x xbuilder
      - run: ./xcpkg run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

      - run: tar cvJPf uctags-builder-macos-${{ matrix.target-version }}-x86_64.tar.xz /opt/uctags-builder

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-macos-${{ matrix.target-version }}-x86_64.tar.xz
          path: uctags-builder-macos-${{ matrix.target-version }}-x86_64.tar.xz


  linux:
    needs: [check]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    strategy:
      fail-fast: false
      matrix:
        target-arch: [x86_64, aarch64, ppc64le, riscv64, s390x]

    runs-on: ubuntu-latest

    steps:
      - run: |
          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          run wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          run chmod a+x ppkg

          run ./ppkg setup --syspm
          run ./ppkg update
          run ./ppkg install grep gsed gawk gmake pkg-config coreutils findutils diffutils libz --static

          install -d /opt/uctags-builder/

          (
            for item in grep gsed gawk gmake pkg-config coreutils findutils diffutils
            do
              run cd "\$HOME/.ppkg/installed/linux-musl-${{ matrix.target-arch }}/\$item"
              run cp -rf * /opt/uctags-builder/
              run cd -
            done
          )

          run wget https://raw.githubusercontent.com/leleliu008/test/master/xbuilder
          run chmod a+x xbuilder
          run ./xbuilder install autoconf automake libtool perl python3 --prefix=/opt/uctags-builder

          run bsdtar cvJPf uctags-builder-linux-${{ matrix.target-arch }}.tar.xz /opt/uctags-builder
          EOF

          chmod +x run.sh

      # https://github.com/multiarch/qemu-user-static
      - if: matrix.target-arch != 'x86_64'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - if: matrix.target-arch == 'x86_64'
        run: docker run -v $PWD:$PWD -w $PWD --name alpine         alpine sh run.sh

      - if: matrix.target-arch == 'aarch64'
        run: docker run -v $PWD:$PWD -w $PWD --name alpine arm64v8/alpine sh run.sh

      - if: matrix.target-arch == 'ppc64le'
        run: docker run -v $PWD:$PWD -w $PWD --name alpine ppc64le/alpine sh run.sh

      - if: matrix.target-arch == 'riscv64'
        run: docker run -v $PWD:$PWD -w $PWD --name alpine riscv64/alpine sh run.sh

      - if: matrix.target-arch == 's390x'
        run: docker run -v $PWD:$PWD -w $PWD --name alpine s390x/alpine sh run.sh

      - run: ls

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-builder-linux-${{ matrix.target-arch }}.tar.xz
          path: uctags-builder-linux-${{ matrix.target-arch }}.tar.xz


  publish:
    needs: [check, freebsd, openbsd, netbsd, macos-arm64, macos-x86_64, linux]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: .
          merge-multiple: true

      - run: ls -a

      - run: |
          printf 'sha256sum:\n```\n%s\n```\n' "$(sha256sum *.tar.xz)" > notes.md

          # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
          git -c init.defaultBranch=master init
          git remote add origin ${{ github.repositoryUrl }}

          TAGNAME="$(date -u +%Y.%m.%d)"

          gh release create "$TAGNAME" *.tar.xz --title "$TAGNAME" --notes-file notes.md
