name: cross compile with android-ndk

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  cross-compile-for-android:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        target-arch: [armv7a, aarch64, i686, x86_64]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'leleliu008/tealdeer'

      - run:  brew install tree file patch

      - run:  tree   --version
      - run:  file   --version
      - run:  rustup --version
      - run:  rustc  --version
      - run:  cargo  --version

      - run:  |
          curl -LO https://raw.githubusercontent.com/leleliu008/test/master/src-types.rs.patch.txt
          patch -p1 < src-types.rs.patch.txt

      - name: build for ${{ matrix.target-arch }}
        run: |
          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          run() {
            printf '%b\n' "$COLOR_PURPLE==>$COLOR_OFF $COLOR_GREEN$*$COLOR_OFF"
            eval "$*"
          }

          export ANDROID_NDK_HOME="$ANDROID_NDK_LATEST_HOME"

          run "env | sed -n '/^ANDROID_/p'"

          run cat  "$ANDROID_NDK_HOME/source.properties"

          HOST_OS_TYPE=$(uname | tr A-Z a-z)
          HOST_OS_ARCH=$(uname -m)

          ANDROID_NDK_TOOLCHAIN_DIR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$HOST_OS_TYPE-$HOST_OS_ARCH

          export PATH="$ANDROID_NDK_TOOLCHAIN_DIR/bin:$PATH"

          # https://libraries.io/cargo/cc
          # https://crates.io/crates/cc
          # https://docs.rs/cc/latest/cc/
          # https://github.com/alexcrichton/cc-rs
          export HOST_CC=cc
          export HOST_CXX=c++
          export HOST_AR=ar

          if [ ${{ matrix.target-arch }} = armv7a ] ; then
            export TARGET_CC=armv7a-linux-androideabi21-clang
          else
            export TARGET_CC=${{ matrix.target-arch }}-linux-android21-clang
          fi

          export TARGET_CXX="${TARGET_}++"
          export TARGET_AR=llvm-ar

          export TARGET_CFLAGS="--sysroot $ANDROID_NDK_TOOLCHAIN_DIR/sysroot"
          export TARGET_CXXFLAGS="$TARGET_CFLAGS"

          if [ ${{ matrix.target-arch }} = armv7a ] ; then
            export RUST_TARGET=armv7-linux-androideabi
          else
            export RUST_TARGET=${{ matrix.target-arch }}-linux-android
          fi

          RUST_TARGET_UPPERCASE_UNDERSCORE=$(printf '%s\n' "$RUST_TARGET" | tr a-z A-Z | tr - _)

          # https://doc.rust-lang.org/cargo/reference/config.html#environment-variables
          # https://doc.rust-lang.org/cargo/reference/environment-variables.html
          export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_AR"="$TARGET_AR"
          export "CARGO_TARGET_${RUST_TARGET_UPPERCASE_UNDERSCORE}_LINKER"="$TARGET_CC"

          # https://github.com/rust-lang/rust/pull/85806
          export RUSTFLAGS="-Clink-arg=-L$PWD"
          echo 'INPUT(-lunwind)' > libgcc.a

          run ls -l

          run rustup target add $RUST_TARGET

          run cargo install -vv --target $RUST_TARGET --path . --root=./install.d

      - run: tree install.d

      - run: |
          file install.d/bin/tldr
          case ${{ matrix.target-arch }} in
            armv7a)  file install.d/bin/tldr | grep 'ELF 32-bit LSB pie executable, ARM, EABI5'   ;;
            aarch64) file install.d/bin/tldr | grep 'ELF 64-bit LSB pie executable, ARM aarch64,' ;;
            i686)    file install.d/bin/tldr | grep 'ELF 32-bit LSB pie executable, Intel 80386,' ;;
            x86_64)  file install.d/bin/tldr | grep 'ELF 64-bit LSB pie executable, x86-64,'      ;;
          esac
