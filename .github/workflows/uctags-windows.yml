name: manually build uctags for windows

on:
  workflow_dispatch:
    inputs:
      target-arch:
        description: choose the target arch to be built for
        type: choice
        options:
          - x64
          - x86

      msvc-version:
        description: choose the Visual Studio version to be built with
        type: choice
        options:
          - 2022
          - 2019

      enable-manpages:
        description: whether generate manpages
        type: boolean
        default: false

      enable-libiconv:
        description: whether enable libiconv support
        type: boolean
        default: false

jobs:
  build:

    runs-on: windows-${{ github.event.inputs.msvc-version }}

    defaults:
      run:
        shell: cmd /C {0}

    steps:
      - run: choco install -y file zip

      - uses: actions/checkout@v3
        with:
          repository: 'universal-ctags/ctags'

      - if: ${{ github.event.inputs.enable-libiconv == 'true' }}
        name: build uctags with libiconv
        run: |
          if "${{ github.event.inputs.msvc-version }}" == "2019" (
            set "XX= (x86)"
          ) else (
            set "XX="
          )

          if "${{ github.event.inputs.target-arch }}" == "x64" (
            set "TARGET_ARCH=amd64"
          ) else (
            set "TARGET_ARCH=x86"
          )

          @echo on

          :: Setup MSVC build environment
          call "C:\Program Files%XX%\Microsoft Visual Studio\${{ github.event.inputs.msvc-version }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %TARGET_ARCH%

          :: Build libiconv (MSVC port)
          git clone --depth=1 https://github.com/koron/libiconv.git
          cd libiconv\msvc10
          nmake NODEBUG=1 NOMSVCRT=1

          :: Install libiconv
          set LIBICONV_INSTALL_DIR=${{ github.workspace }}\libiconv-installed

          mkdir          "%LIBICONV_INSTALL_DIR%\include"
          copy iconv.h   "%LIBICONV_INSTALL_DIR%\include"

          mkdir          "%LIBICONV_INSTALL_DIR%\lib"
          copy iconv.lib "%LIBICONV_INSTALL_DIR%\lib"

          copy iconv.dll "${{ github.workspace }}"

          :: Build ctags with nmake
          cd ${{ github.workspace }}
          nmake -f mk_mvc.mak WITH_ICONV=yes ICONV_DIR=%LIBICONV_INSTALL_DIR% PDB=yes

          dumpbin /dependents ctags.exe

      - if: ${{ github.event.inputs.enable-libiconv == 'false' }}
        name: build uctags
        run: |
          if "${{ github.event.inputs.msvc-version }}" == "2019" (
            set "XX= (x86)"
          ) else (
            set "XX="
          )

          if "${{ github.event.inputs.target-arch }}" == "x64" (
            set "TARGET_ARCH=amd64"
          ) else (
            set "TARGET_ARCH=x86"
          )

          @echo on

          call "C:\Program Files%XX%\Microsoft Visual Studio\${{ github.event.inputs.msvc-version }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %TARGET_ARCH%

          cd ${{ github.workspace }}

          nmake -f mk_mvc.mak PDB=yes

          dumpbin /dependents ctags.exe

      - run: file ctags.exe
      - run: ctags.exe --version
      - run: dir

      - run: |
          set -ex

          echo "PATH=$PATH"

          OUTPUT_DIR="uctags-$(git rev-parse HEAD)+$(date +%s)-windows-${{ github.event.inputs.target-arch }}"

          install -d "$OUTPUT_DIR/bin/"

          cp ctags.exe readtags.exe "$OUTPUT_DIR/bin/"

          zip -9 -r "${OUTPUT_DIR}.zip" "$OUTPUT_DIR"
        shell: C:\msys64\msys2_shell.cmd -no-start -defterm -mingw64 -here -full-path -shell bash {0}

      - uses: actions/upload-artifact@v3
        with:
          name: uctags-windows-${{ github.event.inputs.target-arch }}.zip
          path: uctags-windows-${{ github.event.inputs.target-arch }}.zip
