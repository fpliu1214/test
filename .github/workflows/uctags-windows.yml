name: manually build uctags for windows

on:
  workflow_dispatch:
    inputs:
      target-arch:
        description: choose the target arch to be built for
        type: choice
        options:
          - x64
          - x86

      msvc-version:
        description: choose the Visual Studio version to be built with
        type: choice
        options:
          - 2022
          - 2019

      enable-libiconv:
        description: whether to enable libiconv support
        type: boolean
        default: false

      enable-manpages:
        description: whether to generate manpages
        type: boolean
        default: false

      enable-htmldocs:
        description: whether to generate htmldocs
        type: boolean
        default: false

jobs:
  build:

    runs-on: windows-${{ github.event.inputs.msvc-version }}

    defaults:
      run:
        shell: cmd /C {0}

    steps:
      - run: choco install -y file zip

      - uses: actions/checkout@v3
        with:
          repository: 'universal-ctags/ctags'

      - if: ${{ github.event.inputs.enable-libiconv == 'true' }}
        name: build uctags with nmake (enable-libiconv)
        run: |
          if "${{ github.event.inputs.msvc-version }}" == "2019" (
            set "XX= (x86)"
          ) else (
            set "XX="
          )

          if "${{ github.event.inputs.target-arch }}" == "x64" (
            set "TARGET_ARCH=amd64"
          ) else (
            set "TARGET_ARCH=x86"
          )

          @echo on

          :: Setup MSVC build environment
          call "C:\Program Files%XX%\Microsoft Visual Studio\${{ github.event.inputs.msvc-version }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %TARGET_ARCH%

          :: Build libiconv (MSVC port)
          @echo on
          git clone --depth=1 https://github.com/koron/libiconv.git
          cd libiconv\msvc10
          nmake NODEBUG=1 NOMSVCRT=1

          :: Install libiconv
          set LIBICONV_INSTALL_DIR=${{ github.workspace }}\libiconv-installed

          mkdir          "%LIBICONV_INSTALL_DIR%\include"
          copy iconv.h   "%LIBICONV_INSTALL_DIR%\include"

          mkdir          "%LIBICONV_INSTALL_DIR%\lib"
          copy iconv.lib "%LIBICONV_INSTALL_DIR%\lib"

          copy iconv.dll "${{ github.workspace }}"

          :: Build ctags with nmake
          cd ${{ github.workspace }}
          nmake -f mk_mvc.mak WITH_ICONV=yes ICONV_DIR=%LIBICONV_INSTALL_DIR% PDB=yes

          dumpbin /dependents ctags.exe

      - if: ${{ github.event.inputs.enable-libiconv == 'false' }}
        name: build uctags with nmake
        run: |
          if "${{ github.event.inputs.msvc-version }}" == "2019" (
            set "XX= (x86)"
          ) else (
            set "XX="
          )

          if "${{ github.event.inputs.target-arch }}" == "x64" (
            set "TARGET_ARCH=amd64"
          ) else (
            set "TARGET_ARCH=x86"
          )

          @echo on

          call "C:\Program Files%XX%\Microsoft Visual Studio\${{ github.event.inputs.msvc-version }}\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %TARGET_ARCH%

          @echo on

          cd ${{ github.workspace }}

          nmake -f mk_mvc.mak PDB=yes

          dumpbin /dependents ctags.exe

      - run: file ctags.exe
      - run: ctags.exe --version

      - name: pack uctags
        run: |
          ls -l

          TIMESTAMP="$(date +%Y.%m.%d.%H.%M.%S)"
          OUTPUT_DIR="uctags-${TIMESTAMP}-windows-${{ github.event.inputs.target-arch }}"

          install -d "$OUTPUT_DIR/bin/"

          cp ctags.exe readtags.exe "$OUTPUT_DIR/bin/"

          if [ "${{ github.event.inputs.enable-libiconv }}" = true ] ; then
              cp iconv.dll "$OUTPUT_DIR/bin/"
          fi

          if [ "${{ github.event.inputs.enable-manpages }}" = true ] || [ "${{ github.event.inputs.enable-htmldocs }}" = true ] ; then
              pacman -Syy --noconfirm
              pacman -S   --noconfirm automake autoconf make pkg-config gcc

              pip3 install -U docutils sphinx

              ./autogen.sh
              ./configure --disable-iconv
          fi

          if [ "${{ github.event.inputs.enable-htmldocs }}" = true ] ; then
              make -C docs html
              install -d          "$OUTPUT_DIR/share/doc/"
              mv docs/_build/html "$OUTPUT_DIR/share/doc/"
          fi

          if [ "${{ github.event.inputs.enable-manpages }}" = true ] ; then
              make -C man

              install -d "$OUTPUT_DIR/share/man/man1/"
              install -d "$OUTPUT_DIR/share/man/man5/"
              install -d "$OUTPUT_DIR/share/man/man7/"
 
              cp man/*.1 "$OUTPUT_DIR/share/man/man1/"
              cp man/*.5 "$OUTPUT_DIR/share/man/man5/"
              cp man/*.7 "$OUTPUT_DIR/share/man/man7/"
          fi

          zip -9 -r "${OUTPUT_DIR}.zip" "$OUTPUT_DIR"
        shell: C:\msys64\msys2_shell.cmd -no-start -defterm -mingw64 -here -full-path -shell bash -e -x {0}

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---windows-${{ github.event.inputs.target-arch }}.zip
          path: uctags-*-windows-${{ github.event.inputs.target-arch }}.zip
